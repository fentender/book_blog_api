/*
 * Book Blog API
 * This is a blog about books.
 *
 * OpenAPI spec version: 0.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Book', 'model/Books'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Book'), require('../model/Books'));
  } else {
    // Browser globals (root is window)
    if (!root.BookBlogApi) {
      root.BookBlogApi = {};
    }
    root.BookBlogApi.BookApi = factory(root.BookBlogApi.ApiClient, root.BookBlogApi.Book, root.BookBlogApi.Books);
  }
}(this, function(ApiClient, Book, Books) {
  'use strict';

  /**
   * Book service.
   * @module api/BookApi
   * @version 0.0.5
   */

  /**
   * Constructs a new BookApi. 
   * @alias module:api/BookApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getBook operation.
     * @callback module:api/BookApi~getBookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Book} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a book information
     * Gets `book` objects.
     * @param {Number} bookId Book's ID
     * @param {module:api/BookApi~getBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Book}
     */
    this.getBook = function(bookId, callback) {
      var postBody = null;

      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling getBook");
      }


      var pathParams = {
        'bookId': bookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Book;

      return this.apiClient.callApi(
        '/books/{bookId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBooks operation.
     * @callback module:api/BookApi~getBooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Books} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all book
     * Returns a list containing all books. The list supports paging.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber Page number
     * @param {module:api/BookApi~getBooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Books}
     */
    this.getBooks = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Books;

      return this.apiClient.callApi(
        '/books', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
