/*
 * Book Blog API
 * This is a blog about books.
 *
 * OpenAPI spec version: 0.0.5
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Bookshelf', 'model/Bookshelfs'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Bookshelf'), require('../model/Bookshelfs'));
  } else {
    // Browser globals (root is window)
    if (!root.BookBlogApi) {
      root.BookBlogApi = {};
    }
    root.BookBlogApi.UserBookshelfApi = factory(root.BookBlogApi.ApiClient, root.BookBlogApi.Bookshelf, root.BookBlogApi.Bookshelfs);
  }
}(this, function(ApiClient, Bookshelf, Bookshelfs) {
  'use strict';

  /**
   * UserBookshelf service.
   * @module api/UserBookshelfApi
   * @version 0.0.5
   */

  /**
   * Constructs a new UserBookshelfApi. 
   * @alias module:api/UserBookshelfApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addBookInBookshelf operation.
     * @callback module:api/UserBookshelfApi~addBookInBookshelfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a book to bookshelf.
     * Add a 'book' object to book shelf.
     * @param {String} username User's ID
     * @param {String} bookshelfName Bookshelf's name
     * @param {Number} bookId Book's ID
     * @param {module:api/UserBookshelfApi~addBookInBookshelfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addBookInBookshelf = function(username, bookshelfName, bookId, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling addBookInBookshelf");
      }

      // verify the required parameter 'bookshelfName' is set
      if (bookshelfName === undefined || bookshelfName === null) {
        throw new Error("Missing the required parameter 'bookshelfName' when calling addBookInBookshelf");
      }

      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling addBookInBookshelf");
      }


      var pathParams = {
        'username': username,
        'bookshelfName': bookshelfName,
        'bookId': bookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/bookshelfs/{bookshelfName}/{bookId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBookshelf operation.
     * @callback module:api/UserBookshelfApi~createBookshelfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bookshelf
     * Create a 'bookshelf' object.
     * @param {String} username User's ID
     * @param {module:model/Bookshelf} bookshelf Info of bookshelf
     * @param {module:api/UserBookshelfApi~createBookshelfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createBookshelf = function(username, bookshelf, callback) {
      var postBody = bookshelf;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createBookshelf");
      }

      // verify the required parameter 'bookshelf' is set
      if (bookshelf === undefined || bookshelf === null) {
        throw new Error("Missing the required parameter 'bookshelf' when calling createBookshelf");
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/bookshelfs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBookInBookshelf operation.
     * @callback module:api/UserBookshelfApi~deleteBookInBookshelfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a book to bookshelf.
     * delete a 'book' object to book shelf.
     * @param {String} username User's ID
     * @param {String} bookshelfName Bookshelf's name
     * @param {Number} bookId Book's ID
     * @param {module:api/UserBookshelfApi~deleteBookInBookshelfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBookInBookshelf = function(username, bookshelfName, bookId, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteBookInBookshelf");
      }

      // verify the required parameter 'bookshelfName' is set
      if (bookshelfName === undefined || bookshelfName === null) {
        throw new Error("Missing the required parameter 'bookshelfName' when calling deleteBookInBookshelf");
      }

      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling deleteBookInBookshelf");
      }


      var pathParams = {
        'username': username,
        'bookshelfName': bookshelfName,
        'bookId': bookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/bookshelfs/{bookshelfName}/{bookId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBookshelf operation.
     * @callback module:api/UserBookshelfApi~deleteBookshelfCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a bookshelf
     * Delete a 'bookshelf' object.
     * @param {String} username User's ID
     * @param {String} bookshelfName Bookshelf's name
     * @param {module:api/UserBookshelfApi~deleteBookshelfCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBookshelf = function(username, bookshelfName, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteBookshelf");
      }

      // verify the required parameter 'bookshelfName' is set
      if (bookshelfName === undefined || bookshelfName === null) {
        throw new Error("Missing the required parameter 'bookshelfName' when calling deleteBookshelf");
      }


      var pathParams = {
        'username': username,
        'bookshelfName': bookshelfName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/bookshelfs/{bookshelfName}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBookshelf operation.
     * @callback module:api/UserBookshelfApi~getBookshelfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bookshelf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a bookshelf of user
     * Get a 'bookshelf' object.
     * @param {String} username User's ID
     * @param {String} bookshelfName Bookshelf's name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber Page number
     * @param {module:api/UserBookshelfApi~getBookshelfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bookshelf}
     */
    this.getBookshelf = function(username, bookshelfName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getBookshelf");
      }

      // verify the required parameter 'bookshelfName' is set
      if (bookshelfName === undefined || bookshelfName === null) {
        throw new Error("Missing the required parameter 'bookshelfName' when calling getBookshelf");
      }


      var pathParams = {
        'username': username,
        'bookshelfName': bookshelfName
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Bookshelf;

      return this.apiClient.callApi(
        '/users/{username}/bookshelfs/{bookshelfName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBookshelfs operation.
     * @callback module:api/UserBookshelfApi~getBookshelfsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bookshelfs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all bookshelfs
     * Returns a list containing all bookshelfs. The list supports paging.
     * @param {String} username User's ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber Page number
     * @param {module:api/UserBookshelfApi~getBookshelfsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bookshelfs}
     */
    this.getBookshelfs = function(username, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getBookshelfs");
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Bookshelfs;

      return this.apiClient.callApi(
        '/users/{username}/bookshelfs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
