/*
 * Book Blog API
 * This is a blog about books.
 *
 * OpenAPI spec version: 0.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Review', 'model/Reviews'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Review'), require('../model/Reviews'));
  } else {
    // Browser globals (root is window)
    if (!root.BookBlogApi) {
      root.BookBlogApi = {};
    }
    root.BookBlogApi.ReviewApi = factory(root.BookBlogApi.ApiClient, root.BookBlogApi.Review, root.BookBlogApi.Reviews);
  }
}(this, function(ApiClient, Review, Reviews) {
  'use strict';

  /**
   * Review service.
   * @module api/ReviewApi
   * @version 0.0.3
   */

  /**
   * Constructs a new ReviewApi. 
   * @alias module:api/ReviewApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createReview operation.
     * @callback module:api/ReviewApi~createReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a review
     * Create a 'review' object.
     * @param {Number} bookId Book's ID
     * @param {module:model/Review} review Info of review
     * @param {module:api/ReviewApi~createReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createReview = function(bookId, review, callback) {
      var postBody = review;

      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling createReview");
      }

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling createReview");
      }


      var pathParams = {
        'bookId': bookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/{bookId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReview operation.
     * @callback module:api/ReviewApi~deleteReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a review
     * Delete a 'review' object.
     * @param {Number} bookId Book's ID
     * @param {Number} reviewId Review's ID
     * @param {module:api/ReviewApi~deleteReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteReview = function(bookId, reviewId, callback) {
      var postBody = null;

      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling deleteReview");
      }

      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling deleteReview");
      }


      var pathParams = {
        'bookId': bookId,
        'reviewId': reviewId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/{bookId}/{reviewId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReview operation.
     * @callback module:api/ReviewApi~getReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Review} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a review information
     * Gets `review` objects.
     * @param {Number} bookId Book's ID
     * @param {Number} reviewId Review's ID
     * @param {module:api/ReviewApi~getReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Review}
     */
    this.getReview = function(bookId, reviewId, callback) {
      var postBody = null;

      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling getReview");
      }

      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling getReview");
      }


      var pathParams = {
        'bookId': bookId,
        'reviewId': reviewId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Review;

      return this.apiClient.callApi(
        '/reviews/{bookId}/{reviewId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReviews operation.
     * @callback module:api/ReviewApi~getReviewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reviews} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all reviews
     * Returns a list containing all reviews. The list supports paging.
     * @param {Number} bookId Book's ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber Page number
     * @param {module:api/ReviewApi~getReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reviews}
     */
    this.getReviews = function(bookId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling getReviews");
      }


      var pathParams = {
        'bookId': bookId
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Reviews;

      return this.apiClient.callApi(
        '/reviews/{bookId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
